@comment{'various stuff'}
@includeNamed{'/vertx-java/template/common-lib.templ'}
@code{
  /**
   * Render a tag link to an html link, this function is used as parameter of the
   * renderDocToHtml function when it needs to render tag links.
   */
  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    if (rawType.module != null) {
      var label = link.label.trim();
      if (rawType.kind == CLASS_DATA_OBJECT) {
        if (label.length() == 0) {
          label = rawType.simpleName;
        }
        return "<a href=\"../../dataobjects.html#" + rawType.simpleName + "\">" + label + "</a>";
      } else if (rawType.kind == CLASS_ENUM && rawType.gen) {
        if (label.length() == 0) {
          label = rawType.simpleName;
        }
        return "<a href=\"../../enums.html#" + rawType.simpleName + "\">" + label + "</a>";
      } else {
        if (label.length() > 0) {
          label = "[" + label + "] ";
        }
        var elt = link.targetElement;
        var jsType = rawType.simpleName;
        var kind = elt.getKind().name();
        if (kind == "CLASS" || kind == "INTERFACE") {
          return label + "{@link " + jsType + "}";
        } else if (kind == "METHOD") {
          return label + "{@link " + jsType + "#" + elt.getSimpleName().toString() + "}";
        } else {
          System.out.println("Unhandled kind " + kind);
        }
      }
    }
    return null;
  }
}

@comment{"Generate the module name of a type"}
@comment{"===================================="}

@code{
  def genModuleName(moduleType) {
    return moduleType.raw.moduleName + "-js/" + CASE_CAMEL.to(CASE_SNAKE, moduleType.raw.simpleName);
  }
}

@comment{"Generate the JSDoc type of a type"}
@comment{"===================================="}

@comment{"TODO : add missing types"}
@code{
  def genJSDocType(type) {
    if (type.kind == CLASS_STRING) {
      return 'string';
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
      if (type.simpleName == 'boolean' || type.simpleName == 'Boolean') {
        return 'boolean';
      } else if (type.simpleName == 'char' || type.simpleName == 'Character') {
        return 'string';
      } else {
        return 'number';
      }
    } else if (type.kind == CLASS_JSON_OBJECT) {
      return 'Object';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return 'Object';
    } else if (type.kind == CLASS_ENUM) {
      return 'Object';
    } else if (type.kind == CLASS_API) {
      return type.raw.simpleName;
    } else if (type.kind.collection) {
      return 'Array.<' + genJSDocType(type.args[0]) + '>';
    } else if (type.kind == CLASS_MAP) {
      return 'Object.<string, ' + genJSDocType(type.args[1]) + '>';
    } else if (type.kind == CLASS_OBJECT) {
      return 'Object';
    } else if (type.kind == CLASS_HANDLER) {
      return 'function';
    } else {
      return 'todo';
    }
  }
}

@comment{"Generate the code that converts a parameter from JavaScript to Java to call a Java API method"}
@comment{"============================================================================================="}

@declare{'convParam'}
	@code{paramName = overloaded ? argName : param.name;}
	@if{param.type.kind == CLASS_HANDLER}
		@if{param.type.args[0].kind == CLASS_ASYNC_RESULT}
			@if{param.type.args[0].args[0].name == "java.lang.Void"}
function(ar) {\n
@{ind}    if (ar.succeeded()) {\n
@{ind}      @{paramName}(null, null);\n
@{ind}    } else {\n
@{ind}      @{paramName}(null, ar.cause());\n
@{ind}    }\n
@{ind}  }
			@else{}
function(ar) {\n
@{ind}    if (ar.succeeded()) {\n
@{ind}      @{paramName}(@includeNamed{'convReturn'; templ='arVal'; returnType=param.type.args[0].args[0]}, null);\n
@{ind}    } else {\n
@{ind}      @{paramName}(null, ar.cause());\n
@{ind}    }\n
@{ind}  }
			@end{}
		@else{param.type.args[0].name == "java.lang.Void"}
@{paramName}
		@else{}
function(jVal) {\n
@{ind}    @{paramName}(@includeNamed{'convReturn'; templ='basicVal'; returnType=param.type.args[0]});\n
@{ind}  }
		@end{}
	@else{param.type.kind == CLASS_JSON_OBJECT}
utils.convParamJsonObject(@{paramName})
	@else{param.type.kind == CLASS_JSON_ARRAY}
utils.convParamJsonArray(@{paramName})
	@else{param.dataObject}
@{paramName} != null ? new @{param.type.simpleName}(new JsonObject(JSON.stringify(@{paramName}))) : null
	@else{param.type.kind == CLASS_ENUM}
@{param.type.name}.valueOf(@{argName})
	@else{param.type.kind == CLASS_OBJECT}
utils.convParamTypeUnknown(@{paramName})
	@else{param.type.kind.basic}
@{paramName}
	@else{param.type.kind == CLASS_THROWABLE}
utils.convParamThrowable(@{paramName})
	@else{param.type.kind == CLASS_LIST}
		@if{param.type.args[0].name == 'long' || param.type.args[0].name == 'java.lang.Long'}
utils.convParamListLong(@{paramName})
		@else{param.type.args[0].name == 'short' || param.type.args[0].name == 'java.lang.Short'}
utils.convParamListShort(@{paramName})
		@else{param.type.args[0].name == 'byte' || param.type.args[0].name == 'java.lang.Byte'}
utils.convParamListByte(@{paramName})
		@else{param.type.args[0].kind == CLASS_API}
utils.convParamListVertxGen(@{paramName})
		@else{param.type.args[0].kind == CLASS_JSON_OBJECT}
utils.convParamListJsonObject(@{paramName})
		@else{param.type.args[0].kind == CLASS_JSON_ARRAY}
utils.convParamListJsonArray(@{paramName})
		@else{param.type.args[0].kind == CLASS_DATA_OBJECT}
utils.convParamListDataObject(@{paramName}, function(json) { return new @{param.type.args[0].simpleName}(json); })
		@else{param.type.args[0].kind == CLASS_ENUM}
utils.convParamListEnum(@{paramName}, function(val) { return Packages.@{param.type.args[0].name}.valueOf(val); })
		@else{}
@{paramName}
		@end{}
	@else{param.type.kind == CLASS_SET}
		@if{param.type.args[0].name == 'long' || param.type.args[0].name == 'java.lang.Long'}
utils.convParamSetLong(@{paramName})
		@else{param.type.args[0].name == 'short' || param.type.args[0].name == 'java.lang.Short'}
utils.convParamSetShort(@{paramName})
		@else{param.type.args[0].name == 'byte' || param.type.args[0].name == 'java.lang.Byte'}
utils.convParamSetByte(@{paramName})
		@else{param.type.args[0].kind == CLASS_API}
utils.convParamSetVertxGen(@{paramName})
		@else{param.type.args[0].kind == CLASS_JSON_OBJECT}
utils.convParamSetJsonObject(@{paramName})
		@else{param.type.args[0].kind == CLASS_JSON_ARRAY}
utils.convParamSetJsonArray(@{paramName})
		@else{param.type.args[0].kind == CLASS_DATA_OBJECT}
utils.convParamSetDataObject(@{paramName}, function(json) { return new @{param.type.args[0].simpleName}(json); })
		@else{param.type.args[0].kind == CLASS_ENUM}
utils.convParamSetEnum(@{paramName}, function(val) { return Packages.@{param.type.args[0].name}.valueOf(val); })
		@else{}
utils.convParamSetBasicOther(@{paramName})
		@end{}
	@else{param.type.kind == CLASS_MAP}
		@if{param.type.args[1].name == 'long' || param.type.args[1].name == 'java.lang.Long'}
utils.convParamMapLong(@{paramName})
		@else{param.type.args[1].name == 'short' || param.type.args[1].name == 'java.lang.Short'}
utils.convParamMapShort(@{paramName})
		@else{param.type.args[1].name == 'byte' || param.type.args[1].name == 'java.lang.Byte'}
utils.convParamMapByte(@{paramName})
		@else{param.type.args[1].kind == CLASS_API}
utils.convParamMapVertxGen(@{paramName})
		@else{param.type.args[1].kind == CLASS_JSON_OBJECT}
utils.convParamMapJsonObject(@{paramName})
		@else{param.type.args[1].kind == CLASS_JSON_ARRAY}
utils.convParamMapJsonArray(@{paramName})
		@else{}
@{paramName}
		@end{}
	@else{}
@{paramName}._jdel
	@end{}
@end{}

@declare{'basicVal'}
jVal
@end{}

@declare{'arVal'}
ar.result()
@end{}

@comment{"Generate a JavaScript Method"}
@comment{"============================"}

@declare{'genMethod'}
	@code{methodList = methodsByName.get(methodName)}
	@if{methodFilter != null}
		@code{methodList = new java.util.ArrayList()}
		@foreach{method : methodsByName.get(methodName)}
			@if{methodFilter(method)}
				@code{methodList.add(method)}
			@end{}
		@end{}
	@end{}
	@if{methodList.size() > 0}
	@code{overloaded = methodList.size() > 1; method = methodList.get(methodList.size() - 1);}
	@if{static == method.staticMethod}
@{ind}/**\n
@if{method.doc != null}
@{renderDocToHtml(ind, method.doc, renderLinkToHtml)}
@end{}\n
@{ind} @{static ? ("@memberof module:" + genModuleName(type)) : "@public" }\n
@foreach{param: method.params}@{ind} @param @{param.name} {@{genJSDocType(param.type)}} @if{param.description != null}@{renderTokensToHtml("", param.description.tokens, renderLinkToHtml, "")} @end{}@end{"\n"}\n
@if{!method.returnType.name.equals("void")}
@{ind} @return {@{genJSDocType(method.returnType)}}@if{method.returnDescription != null} @{renderTokensToHtml("", method.returnDescription.tokens, renderLinkToHtml, "")}@end{}\n
@end{}
@{ind} */\n
@{ind}@if{static}@{ifaceSimpleName}@else{}this@end{}.@{methodName} =
		@if{overloaded}
		 function() {\n
		@else{}
		 function(@foreach{param: method.params}@{param.name}@end{", "}) {\n
		@end{}
			@code{mcnt = 0;}
@{ind}  var __args = arguments;\n
			@foreach{method: methodList}
@{ind}@if{mcnt == 0}  if@else{}else if@end{} (__args.length === @{method.params.size()}
				@code{mcnt++;}
				@code{cnt = 0;}
				@if{method.params.size() > 0} && @end{}
				@foreach{param: method.params}
					@if{param.type.kind == CLASS_PRIMITIVE || param.type.kind == CLASS_BOXED_PRIMITIVE}
					typeof __args[@{cnt++}] ===
						@if{param.type.name == 'long' || param.type.name == 'java.lang.Long' ||
								param.type.name == 'int'  || param.type.name == 'java.lang.Integer' ||
								param.type.name == 'short' || param.type.name == 'java.lang.Short' ||
								param.type.name == 'float' || param.type.name == 'java.lang.Float' ||
								param.type.name == 'double' || param.type.name == 'java.lang.Double' ||
								param.type.name == 'byte' || param.type.name == 'java.lang.Byte'}
							'number'
						@else{param.type.name == 'boolean' || param.type.name == 'java.lang.Boolean'}
							'boolean'
						@else{param.type.name == 'char' || param.type.name == 'java.lang.Character'}
							'string'
						@end{}
					@else{param.type.kind == CLASS_STRING || param.type.kind == CLASS_ENUM}
					typeof __args[@{cnt++}] === 'string'
					@else{param.type.kind == CLASS_API}
						typeof __args[@{cnt}] === 'object' && __args[@{cnt++}]._jdel
					@else{param.type.kind == CLASS_JSON_ARRAY || param.type.kind == CLASS_LIST || param.type.kind == CLASS_SET}
						typeof __args[@{cnt}] === 'object' && __args[@{cnt++}] instanceof Array
					@else{param.type.kind == CLASS_HANDLER}
						typeof __args[@{cnt++}] === 'function'
					@else{param.type.kind == CLASS_OBJECT}
						@code{cnt++}
						true
					@else{param.type.kind == CLASS_THROWABLE}
						typeof __args[@{cnt++}] === 'object'
					@else{}
						typeof __args[@{cnt++}] === 'object'
					@end{}
				@end{' && '}) {\n
				@includeNamed{'genMethodAdapter'}
@{ind}  }
			@end{} else throw new TypeError('function invoked with invalid arguments');\n
@{ind}};\n\n
	@end{}
	@end{}
@end{}
