
@comment{"Generate a call to a Java API method"}
@comment{"===================================="}

@declare{'genMethodCall'}
@if{static}J@{ifaceSimpleName}@else{}j_@{ifaceName}@end{}.@{method.name}(
	@foreach{param: method.params}
@includeNamed{'convParam'}
	@end{", "})
@end{}

@comment{"Generate the code that converts a parameter from JavaScript to Java to call a Java API method"}
@comment{"============================================================================================="}

@declare{'convParam'}
	@if{param.type.startsWith('io.vertx.core.Handler<')}
		@code{genericType = helper.getGenericType(param.type)}
		@if{genericType.startsWith('io.vertx.core.AsyncResult<')}
			@code{genericType = helper.getGenericType(genericType)}
			@if{genericType.equals('java.lang.Void')}
function(ar) {\n
@{ind}    if (ar.succeeded()) {\n
@{ind}      @{param.name}(null, null);\n
@{ind}    } else {\n
@{ind}      @{param.name}(null, ar.cause());\n
@{ind}    }\n
@{ind}  }
			@else{}
function(ar) {\n
@{ind}    if (ar.succeeded()) {\n
@{ind}      @{param.name}(@includeNamed{'convReturn'; templ='arVal'; returnType=genericType}, null);\n
@{ind}    } else {\n
@{ind}      @{param.name}(null, ar.cause());\n
@{ind}    }\n
@{ind}  }
			@end{}
		@else{genericType.equals('java.lang.Void')}
@{param.name}
		@else{}
function(jVal) {\n
@{ind}    @{param.name}(@includeNamed{'convReturn'; templ='basicVal'; returnType=genericType});\n
@{ind}  }
		@end{}
	@else{param.type.equals('io.vertx.core.json.JsonObject')}
utils.convJSObjectToJsonObject(@{param.name})
	@else{param.type.equals('io.vertx.core.json.JsonArray')}
utils.convJSArrayToJsonArray(@{param.name})
	@else{param.options}
new @{helper.getSimpleName(param.type)}(new JsonObject(JSON.stringify(@{param.name})))
	@else{param.type.equals('java.lang.Object')}
utils.convRuntimeParam(@{param.name})
	@else{helper.isBasicType(param.type)}
@{param.name}
	@else{}
@{param.name}._jdel()
	@end{}
@end{}

@declare{'basicVal'}
jVal
@end{}

@declare{'arVal'}
ar.result()
@end{}

@comment{"Generate the code that converts a Java return to the corresponding JavaScript value"}
@comment{"This is also used for converting values returned from Java API via handlers"}
@comment{"==================================================================================="}

@declare{'convReturn'}
	@if{returnType.startsWith('java.util.List')}
@includeNamed{templ}
	@else{returnType.startsWith('java.util.Set')}
utils.convSet(@includeNamed{templ})
	@else{returnType.equals('io.vertx.core.json.JsonObject') || returnType.equals('io.vertx.core.json.JsonArray')}
JSON.parse((@includeNamed{templ}).encode())
	@else{helper.isBasicType(returnType)}
@includeNamed{templ}
	@else{helper.isVertxGenType(returnType)}
new @{helper.getSimpleName(helper.getNonGenericType(returnType))}(@includeNamed{templ})
	@else{}
	@comment{'This will probably happen if the return type is generic'}
utils.convRuntimeReturn(@includeNamed{templ})
	@end{}
@end{}

@comment{"Generate a JavaScript Method"}
@comment{"============================"}

@declare{'genMethod'}
	@if{static == method.staticMethod}
		@if{method.comment != null}
@{helper.indentString("/*\n" + helper.removeTags(method.comment) + "\n*/\n", ind)}
		@end{}
@{ind}@if{static}@{ifaceSimpleName}@else{}this@end{}.@{method.name} = function(@foreach{param0: method.params}@{param0.name}@end{", "}) {\n
		@if{method.squashed}
@{ind}  switch (arguments.length) {\n
			@foreach{method: methodsByName.get(method.name)}
@{ind}    case @{method.params.size()}:\n
				@if{!method.returnType.equals("void")}
					@if{method.fluent}
@{ind}      @includeNamed{'genMethodCall'};\n
						@if{static}
@{ind}      return @{ifaceSimpleName};\n
						@else{}
@{ind}      return that;\n
						@end{}
					@else{}
@{ind}      return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=method.returnType};\n
					@end{}
				@else{}
@{ind}      @includeNamed{'genMethodCall'};\n
@{ind}      return;\n
				@end{}
			@end{}
@{ind}    default: throw "Invalid number of arguments"\n
@{ind}  }\n
		@else{}
			@if{!method.returnType.equals("void")}
				@if{method.fluent}
@{ind}  @includeNamed{'genMethodCall'};\n
					@if{static}
@{ind}  return @{ifaceSimpleName};\n
					@else{}
@{ind}  return that;\n
					@end{}
				@else{method.cacheReturn}
@{ind}  if (that.cached@{method.name} == null) {\n
@{ind}    that.cached@{method.name} = @includeNamed{'convReturn'; templ='genMethodCall'; returnType=method.returnType};\n
@{ind}  }\n
@{ind}  return that.cached@{method.name};\n
				@else{}
@{ind}  return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=method.returnType};\n
				@end{}
			@else{}
@{ind}  @includeNamed{'genMethodCall'};\n
			@end{}
		@end{}
@{ind}};\n\n
	@end{}
@end{}

@comment{"This is where the generation starts"}
@comment{"==================================="}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

@comment{"Generate the requires"}

var utils = require('vertx-js/util/utils');\n
@foreach{referencedType : referencedTypes}
@code{refedType=helper.getSimpleName(helper.getNonGenericType(referencedType));}
var @{refedType} = require('vertx-js/@{helper.convertCamelCaseToUnderscores(refedType)}');\n
@end{}
\n

@comment{"The top level vars for the module"}

var io = Packages.io;\n
var JsonObject = io.vertx.core.json.JsonObject;\n
var J@{ifaceSimpleName} = @{helper.getNonGenericType(ifaceFQCN)};\n
@foreach{optionType: referencedOptionsTypes}
var @{helper.getSimpleName(optionType)} = @{optionType};\n
@end{}
\n
@code{ifaceName = helper.decapitaliseFirstLetter(ifaceSimpleName)}

@comment{"The main comment"}

/**\n
@if{ifaceComment != null}
@{helper.removeTags(ifaceComment)}\n
@end{}
  @class\n
*/\n

@comment{"The constructor"}

var @{ifaceSimpleName} = function(j_val) {\n\n
  var j_@{ifaceName} = j_val;\n
  var that = this;\n

@comment{"Apply any supertypes"}

@foreach{superType: superTypes}
  @{helper.getSimpleName(helper.getNonGenericType(superType))}.call(this, j_val);\n
@end{}
\n

@comment{"Now iterate through each *squashed* method - we use squashed methods because JS doesn't support"}
@comment{"function overloading"}

@foreach{method:squashedMethods}

@comment{"Call out to actually generate the method, we only consider non static methods here"}
@includeNamed{'genMethod';static=false;ind="  "}

@end{}

@comment{"Each object has a _jdel function which gives access to the underlying Java object"}

  // Get a reference to the underlying Java delegate\n
  this._jdel = function() {\n
    return j_@{ifaceName};\n
  }\n\n
};\n
\n

@comment{"Iterate through the squashed methods again, this time only considering the static ones"}

@foreach{method:squashedMethods}

@comment{"Call out to generate the static method"}
@includeNamed{'genMethod';static=true;ind=""}

@end{}

// We export the Constructor function\n
module.exports = @{ifaceSimpleName};





